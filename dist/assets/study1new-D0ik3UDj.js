import{M as r,a as l,S as d}from"./StudyContent-DmgqnPrB.js";import{c as s}from"./codeItem-BKQqYzK7.js";import{M as u}from"./MyTitle-BnWlqeve.js";import{_ as h,n as f,o as c,c as w,w as n,a as t,b as i,d as a}from"./index-NwAmraC0.js";const b={components:{"my-title":u,"my-footer":l,"my-container":r,"study-content":d,"code-item":s}},y=Object.assign(b,{__name:"study1new",setup(v){return f(()=>{const o=document.getElementById("robotCanvas"),e=o.getContext("2d");o.width/2,o.height/2;function p(){e.clearRect(0,0,o.width,o.height),e.fillRect(450,200,200,200),e.clearRect(480,280,100,100),e.strokeRect(490,320,50,50)}function g(){const m=document.getElementById("codeDisplay");m.textContent=`
  function drawCircle() {
    ctx.clearRect(0, 0, canvas.width, canvas.height)
    ctx.fillRect(450, 200, 200, 200)
    ctx.clearRect(480, 280, 100, 100)
    ctx.strokeRect(490, 320, 50, 50)
  }
    `}p(),g()}),(o,e)=>(c(),w(r,null,{default:n(()=>[t("header",null,[i(u,{title1:"Drawing rectangles"}),e[0]||(e[0]=t("p",null," Unlike SVG, canvas only supports two primitive shapes: rectangles and paths (lists of points connected by lines). All other shapes must be created by combining one or more paths. Luckily, we have an assortment of path drawing functions which make it possible to compose very complex shapes. ",-1))]),e[34]||(e[34]=t("main",{style:{"margin-top":"20px"}},[t("canvas",{id:"robotCanvas",width:"1200",height:"600"}),t("div",{id:"codeDisplay"})],-1)),t("footer",null,[i(d,null,{default:n(()=>[e[15]||(e[15]=t("p",null," canvas is an element introduced by HTML5, which provides an area for drawing through JavaScript. canvas itself does not have drawing capabilities, it is only a canvas, the real work of drawing is done through JavaScript. ",-1)),e[16]||(e[16]=t("br",null,null,-1)),e[17]||(e[17]=t("p",null," The fillRect() function draws a large black square 100 pixels on each side. The clearRect() function then erases a 60x60 pixel square from the center, and then strokeRect() is called to create a rectangular outline 50x50 pixels within the cleared square. ",-1)),e[18]||(e[18]=t("br",null,null,-1)),e[19]||(e[19]=t("p",null," In upcoming pages we'll see two alternative methods for clearRect(), and we'll also see how to change the color and stroke style of the rendered shapes. ",-1)),e[20]||(e[20]=t("p",null," First let's look at the rectangle. There are three functions that draw rectangles on the canvas: ",-1)),i(s,null,{code:n(()=>e[1]||(e[1]=[a('var ctx = canvas.getContext("2d");')])),item:n(()=>e[2]||(e[2]=[a(" This is the starting point for drawing, through which you get a drawing environment and can use various drawing commands in this environment. It is the foundation of 2D drawing, providing a rich API for manipulating pixels, drawing shapes, and processing images.")])),_:1}),i(s,null,{code:n(()=>e[3]||(e[3]=[a("fillRect(x, y, width, height)")])),item:n(()=>e[4]||(e[4]=[a(" The fillRect function is used to draw a filled rectangle. The upper left corner of the rectangle is specified by x and y. width and height specify the width and height of the rectangle. It is used to draw a solid rectangle for use in backgrounds, buttons, base construction of graphics, and so on. The rectangle will be filled using the currently set fillStyle.")])),_:1}),i(s,null,{code:n(()=>e[5]||(e[5]=[a("strokeRect(x, y, width, height)")])),item:n(()=>e[6]||(e[6]=[a("strokeRect is used to draw a rectangular border, the style of the border is determined by the current strokeStyle (stroke style) and lineWidth (line width). Its role is to draw the outline of the rectangle, such as for the content of the box, or the design of UI elements such as button borders.")])),_:1}),i(s,null,{code:n(()=>e[7]||(e[7]=[a("clearRect(x, y, width, height)")])),item:n(()=>e[8]||(e[8]=[a("clearRect is used to clear a rectangular area on the Canvas, making the area transparent. For example, before each screen update, we can clear the entire canvas (using clearRect (0, 0, canvas.width, canvas.height)) and then redraw the new content.")])),_:1}),i(s,null,{code:n(()=>e[9]||(e[9]=[a("canvas")])),item:n(()=>e[10]||(e[10]=[a(" Scope of application: games, animation, real-time data visualisation, etc. Canvas draws faster and is suitable for scenes with frequent updates and redraws.")])),_:1}),e[21]||(e[21]=t("p",null,"Benefits: Direct manipulation of pixels, suitable for complex graphical operations and high frequency updates and suitable for complex graphics, animations and games.",-1)),e[22]||(e[22]=t("p",null,"Disadvantages: drawn graphics can not be directly manipulated like DOM elements, you must implement your own interaction and Canvas is pixel-based, when the graphics are zoomed in, it may appear blurred and distorted.",-1)),i(s,null,{code:n(()=>e[11]||(e[11]=[a("SVG")])),item:n(()=>e[12]||(e[12]=[a(" Scope of application: icons, maps, flowcharts, etc. SVG has good scalability and is suitable for graphics that require high quality scaling. Each SVG element is part of the DOM and can be manipulated directly through CSS and JavaScript, making it suitable for complex interaction scenarios.")])),default:n(()=>[e[13]||(e[13]=t("br",null,null,-1)),e[14]||(e[14]=t("br",null,null,-1))]),_:1}),e[23]||(e[23]=t("p",null,"Benefits: vector graphics, no distortion at any zoom. svg graphic elements can be manipulated independently and are easy to interact with. svg is part of the DOM and can be accessed through assistive technologies such as screen readers.",-1)),e[24]||(e[24]=t("p",null,"Disadvantages: Browser rendering slows down when SVG contains a large number of elements and SVG's performance bottleneck makes it unsuitable for complex real-time animations or game graphics.",-1)),e[25]||(e[25]=t("br",null,null,-1)),e[26]||(e[26]=t("br",null,null,-1)),e[27]||(e[27]=t("br",null,null,-1)),e[28]||(e[28]=t("br",null,null,-1)),e[29]||(e[29]=t("p",null," Each of these three functions takes the same parameters. x and y specify the position on the canvas (relative to the origin) of the top-left corner of the rectangle. width and height provide the rectangle's size. ",-1)),e[30]||(e[30]=t("p",null," Below is the draw() function from the previous page, but now it is making use of these three functions. ",-1)),e[31]||(e[31]=t("p",null,"more look this",-1)),e[32]||(e[32]=t("br",null,null,-1)),e[33]||(e[33]=t("p",null," https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Drawing_shapes ",-1)),i(l,{week:"3",num:"1"})]),_:1})])]),_:1}))}}),C=h(y,[["__scopeId","data-v-e50b8fd4"]]);export{C as default};
